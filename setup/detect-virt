#!/usr/bin/env sh

# This script detects the virtualization technology in use and prints the result.
# Possible outputs are: none, docker, wsl, openvz, xen, vmware, virtualbox, kvm, qemu, parallels, lxc, lxc-libvirt, lxc-libvirt-tcg, linux-vserver, jail, systemd-nspawn, systemd-nspawn-secure, systemd-nspawn-nv.

if grep -q docker /proc/1/cgroup; then
    printf "docker\n"
elif [ -f /proc/sys/fs/binfmt_misc/WSLInterop ] || grep -qi Microsoft /proc/version; then
    printf "wsl\n"
elif [ -f /proc/user_beancounters ]; then
    printf "openvz\n"
elif [ -f /proc/xen/capabilities ] || [ -f /sys/hypervisor/uuid ]; then
    printf "xen\n"
elif [ -f /sys/devices/virtual/dmi/id/product_name ] && grep -qi "VMware" /sys/devices/virtual/dmi/id/product_name; then
    printf "vmware\n"
elif [ -f /sys/devices/virtual/dmi/id/product_name ] && grep -qi "VirtualBox" /sys/devices/virtual/dmi/id/product_name; then
    printf "virtualbox\n"
elif [ -n "$(dmesg | grep -i 'kvm: disabled by bios')" ]; then
    printf "kvm\n"
elif [ -f /sys/firmware/acpi/tables/MSDM ]; then
    printf "parallels\n"
elif dmesg | grep -q "Hypervisor detected"; then
    if dmesg | grep -q "Booting paravirtualized kernel"; then
        printf "xen\n"
    elif dmesg | grep -q "KVM:"; then
        printf "kvm\n"
    elif dmesg | grep -q "QEMU ACPI"; then
        printf "qemu\n"
    elif dmesg | grep -q "VMware Virtual"; then
        printf "vmware\n"
    elif dmesg | grep -q "VirtualBox"; then
        printf "virtualbox\n"
    elif dmesg | grep -q "LXC"; then
        if dmesg | grep -q "systemd-nspawn"; then
            if dmesg | grep -q "with NVIDIA GPU pass-through support"; then
                printf "systemd-nspawn-nv\n"
            elif dmesg | grep -q "secure container"; then
                printf "systemd-nspawn-secure\n"
            else
                printf "systemd-nspawn\n"
            fi
        elif dmesg | grep -q "libvirt-lxc"; then
            if dmesg | grep -q "TCG enabled"; then
                printf "lxc-libvirt-tcg\n"
            else
                printf "lxc-libvirt\n"
            fi
        else
            printf "lxc\n"
        fi
    elif dmesg | grep -q "Linux-VServer"; then
        printf "linux-vserver\n"
    elif dmesg | grep -q "FreeBSD jail"; then
        printf "jail\n"
    fi
else
    printf "none\n"
fi




####################################################################################

# Check for LXC
if command -v lxc-info >/dev/null 2>&1; then
    if grep -q libvirt /proc/1/environ; then
        # Check for LXC with libvirt
        if grep -q tcg /proc/1/environ; then
            echo "lxc-libvirt-tcg"
        else
            echo "lxc-libvirt"
        fi
    else
        echo "lxc"
    fi
else
    echo "none"
fi
# Check for libvirt
if command -v virsh >/dev/null 2>&1; then
    if grep -q tcg /proc/1/environ; then
        echo "libvirt-tcg"
    else
        echo "libvirt"
    fi
else
    echo "none"
fi
# Check for Parallels
if command -v prlctl >/dev/null 2>&1; then
    echo "parallels"
else
    echo "none"
fi
# Check for Linux-VServer
if command -v vserver-info >/dev/null 2>&1; then
    echo "linux-vserver"
else
    echo "none"
fi
# Check for LXC
if command -v lxc-start >/dev/null 2>&1; then
    echo "lxc"
elif grep -q libvirt /proc/1/environ; then
    # Check for LXC with libvirt
    if grep -q tcg /proc/1/environ; then
        echo "lxc-libvirt-tcg"
    else
        echo "lxc-libvirt"
    fi
else
    echo "none"
fi

if command -v dmidecode > /dev/null 2>&1; then
    if dmidecode -s system-product-name | grep -q "VMware"; then
        echo "vmware"
        exit 0
    fi
fi

if command -v lspci > /dev/null 2>&1; then
    if lspci | grep -q "Virtual.*VGA"; then
        echo "virtualbox"
        exit 0
    fi
fi

if grep -q docker /proc/1/cgroup; then
    _virt='docker'
elif [ -f /proc/sys/fs/binfmt_misc/WSLInterop ] || grep -qi Microsoft /proc/version; then
    _virt='wsl'
elif [ -f /proc/user_beancounters ]; then
    _virt='openvz'
elif [ -f /proc/xen/capabilities ] || [ -f /sys/hypervisor/uuid ]; then
    _virt='xen'
elif [ -f /sys/devices/virtual/dmi/id/product_name ] && grep -qi "VMware" /sys/devices/virtual/dmi/id/product_name; then
    _virt='vmware'
elif [ -f /sys/devices/virtual/dmi/id/product_name ] && grep -qi "VirtualBox" /sys/devices/virtual/dmi/id/product_name; then
    _virt='vbox'
elif uname -a | grep -q "hypervisor\|virtual\|vmware\|qemu\|xen"; then
    _virt='vm'
else
    _virt='none'


# Check if the system is running inside a container
if grep -q docker /proc/1/cgroup; then
    echo "docker"
elif grep -q lxc /proc/1/environ; then
    if grep -q libvirt /proc/1/environ; then
        if grep -q tcg /proc/1/environ; then
            echo "lxc-libvirt-tcg"
        else
            echo "lxc-libvirt"
        fi
    else
        echo "lxc"
    fi
elif grep -q vserver /proc/1/environ; then
    echo "linux-vserver"
elif grep -q openvz /proc/1/environ; then
    echo "openvz"
elif grep -q jail /proc/1/environ; then
    echo "jail"
elif grep -q 'paravirtual\|Xen' /proc/1/environ; then
    echo "xen"
elif grep -q 'kvm\|qemu' /proc/1/environ; then
    if lspci | grep -q "VGA compatible controller:.*VMware"; then
        echo "vmware"
    elif lspci | grep -q "VGA compatible controller:.*NVIDIA"; then
        echo "systemd-nspawn-nv"
    else
        echo "kvm"
    fi
elif lspci | grep -q "VGA compatible controller:.*VMware"; then
    echo "vmware"
elif lspci | grep -q "VGA compatible controller:.*Parallels"; then
    echo "parallels"
elif lspci | grep -q "VGA compatible controller:.*NVIDIA"; then
    echo "systemd-nspawn-nv"
elif systemctl is-active --quiet systemd-nspawn@; then
    if systemctl show --property=ExecMainPID --value systemd-nspawn@ | xargs -I{} grep -q docker /proc/{}/cgroup; then
        echo "systemd-nspawn"
    elif systemctl show --property=ExecMainPID --value systemd-nspawn@ | xargs -I{} grep -q 'secure=1' /proc/{}/environ; then
        echo "systemd-nspawn-secure"
    else
        echo "systemd-nspawn"
    fi
elif dmidecode -s system-product-name | grep -qi "VirtualBox"; then
    echo "oracle"
elif [[ -f /run/.containerenv ]]; then
    echo "containerd"
elif [[ -f /proc/self/cgroup ]] && grep -q "kubepods" /proc/self/cgroup; then
    echo "kubernetes"
else
    echo 'none'
fi

